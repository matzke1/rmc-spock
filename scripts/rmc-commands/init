#!/bin/bash
# Initialize a build tree. The argument should be the ROSE source tree.
arg0="rmc ${0##*/}"
dir0="${0%/*}"

source "$SPOCK_SCRIPTS/impl/basic-support.sh" || exit 1
source "$SPOCK_SCRIPTS/impl/spock-realpath.sh" || exit 1

# Check command-line arguments
do_batch_mode= do_force= do_help=
while [ "$#" -gt 0 ]; do
    case "$1" in
	--)
	    shift
	    break
	    ;;

	--batch)
	    do_batch_mode=yes
	    shift
	    ;;

	-f|--force)
	    do_force=yes
	    shift
	    ;;

	-h|--help)
	    do_help=yes
	    shift
	    ;;

	-*)
	    echo "$arg0: unknown switch: $1" >&2
	    exit 1
	    ;;
	*)
	    break
	    ;;
    esac
done

if [ -n "$do_help" -o "$1" = "help" ]; then
    echo "usage: $arg0 [SWITCHES] PATH_TO_ROSE_SOURCE_TREE"
    echo "   Initializes the CWD to be a ROSE build tree by creating a default .rmc-main.cfg file,"
    echo "   then plop the user into an editor to make adjustments (unless --batch)."
    echo "     -b, --batch"
    echo "       Don't do anything that requires user interaction, such as invoking the editor."
    echo "       Use environment variables to override RMC settings. For instance, COMPILER overrides"
    echo "       the rmc_compiler setting, LANGUAGES overrides the rmc_languages setting, etc.  The"
    echo "       defaults should already be sane, and the user is plopped into an editor anyway, so"
    echo "       these overrides are mostly for batch mode when this script is called from other scripts."
    echo "     -f, --force"
    echo "       Force creation of a new .rmc-main.cfg file even if the current working directory is"
    echo "       not empty or it already contains a .rmc-main.cfg file."
    exit 0
fi

if [ "$#" -ne 1 ]; then
    echo "usage: $arg0 \$PATH_TO_ROSE_SOURCE_TREE" >&2
    echo "also try: $arg0 --help" >&2
    exit 1
fi


# Sanity checks
rose_srcdir=$(spock-realpath "$1")
[ -d "$rose_srcdir/." ] ||
    die "not a directory: $rose_srcdir"
[ -e "$rose_srcdir/src/frontend/BinaryFormats/ElfSection.C" ] ||
    die "not a ROSE source tree: $rose_srcdir"
[ -e ".rmc-main.cfg" -a "$do_force" = "" ] &&
    die "this build tree is already initialized"
[ "$(ls)" = "" -o -n "$do_force" ] ||
    die "the CWD must be a new (empty) build tree"

# What C++ compiler are we using right now?
if [ "$COMPILER" = "" ]; then
    cxx_quad=$($SPOCK_SCRIPTS/impl/detect-compiler-characteristics --quad --baselang=c++ c++)
    cxx_vendor=$(echo $cxx_quad |cut -d: -f1)
    cxx_lang=$(echo $cxx_quad |cut -d: -f3)
    cxx_version=$(echo $cxx_quad |cut -d: -f4)
    COMPILER="${cxx_vendor}-${cxx_version}-${cxx_lang}"
fi

config_property() {
    local rmc_command="$1" value="$2" comment="$3"
    [ -n "$comment" ] && comment="# $comment"
    printf '%-23s %-23s %s\n' "$rmc_command" "$value" "$comment"
}

# Create a default .rmc-main.cfg
(
    echo "# RMC configuration file -*- shell-script -*-"
    echo
    echo "# Edit this file to change how your build environment will"
    echo "# be configured.  Each time you change this file you should"
    echo "# exit and re-enter the build environment, and possibly rerun"
    echo "# ROSE's configure script (\"rmc config\"), and clean your"
    echo "# build tree (\"make clean\"). Failure to do this may result"
    echo "# in build artifacts compiled in incompatible ways leading to"
    echo "# failures such as segmentation faults."
    echo "#"
    echo "# Note that as of Feb 2017, the new RMC-2 does not yet"
    echo "# support every possible configuration.  For the time being,"
    echo "# you may need to add some software dependencies manually in"
    echo "# order to use them."
    echo
    echo "# All of these settings are fully documented in ROSE's internal"
    echo "# confluence pages. Find them using the search feature."
    echo
    echo "# Basic settings"
    config_property rmc_rosesrc       "$(spock-realpath "$rose_srcdir")"
    config_property rmc_build         "${BUILD:-autoconf}"               "build system: 'autoconf' or 'cmake'"
    config_property rmc_parallelism   "${PARALLELISM:-system}"           "number or 'system'"
    echo
    echo "# Compiler settings"
    config_property rmc_compiler      "$COMPILER"                        "('gnu'|'llvm'|'intel')-version[-language]"
    config_property rmc_debug         "${DEBUG:-yes}"                    "debug support: 'yes' or 'no'"
    config_property rmc_optimize      "${OPTIMIZE:-ambivalent}"          "optimizations: 'yes', 'no', or 'ambivalent'"
    config_property rmc_warnings      "${WARNINGS:-yes}"                 "compiler warnings: 'yes' or 'no'"
    config_property rmc_code_coverage "${CODE_COVERAGE:-no}"             "generate code coverage stats: 'yes' or 'no'"
    echo
    echo "# Configuration options"
    config_property rmc_assertions    "${ASSERTIONS:-ambivalent}"        "the --enable-assertions value or 'ambivalent'"
    config_property rmc_languages     "${LANGUAGES:-all}"                "ROSE frontend languages, comma-separated"
    echo
    echo "# Software dependencies"
    config_property rmc_boost         "${BOOST:-1.57}"                   "Boost version number (required)"
    config_property rmc_cmake         "${CMAKE:-3}"                      "CMake version number (required)"
    config_property rmc_dlib          "${DLIB:-18.17}"                   "DLib version number (optional)"
    config_property rmc_doxygen       "${DOXYGEN:-ambivalent}"           "Doxygen version number (optional)"
    config_property rmc_dwarf         "${DWARF:-none}"                   "DWARF library version number (optional)"
    config_property rmc_edg           "${EDG:-ambivalent}"               "EDG version number (optional)"
    config_property rmc_java          "${JAVA:-8}"                       "Oracle JDK version number (optional)"
    config_property rmc_magic         "${MAGIC:-none}"                   "libmagic version number (optional)"
    config_property rmc_python        "${PYTHON:-3}"                     "Python version number (required)"
    config_property rmc_qt            "${QT:-none}"                      "Qt version number (optional)"
    config_property rmc_readline      "${READLINE:-none}"                "libreadline version number (optional)"
    config_property rmc_spot          "${SPOT:-1.2.6}"                   "Spot library version number (optional)"
    config_property rmc_sqlite        "${SQLITE:-none}"                  "SQLite version number (optional)"
    config_property rmc_wt            "${WT:-3.3.4}"                     "Wt version number (optional)"
    config_property rmc_yaml          "${YAML:-0.5.1}"                   "Yaml-cpp version number (optional)"
    config_property rmc_yices         "${YICES:-1.0.34}"                 "Yices version number (optional)"
) >.rmc-main.cfg

if [ "$do_batch_mode" = "" ]; then
    "${EDITOR:-vi}" .rmc-main.cfg
    echo "Now run $SPOCK_BINDIR/rmc to enter the build subshell"
fi
exit 0
