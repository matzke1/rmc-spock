#!/bin/bash
# This runs ROSE's auto-tools configuration based on software dependencies that are in use.
# It must be invoked inside an RMC environment (it checks for that)
arg0="rmc ${0##*/}"

source "$SPOCK_SCRIPTS/impl/basic-support.sh" || exit 1

show_help_and_exit() {
    #     --------------------------------------------------------------------------------
    echo "Usage:   $arg0 [SWITCHES]"
    echo
    echo "Purpose: Runs whatever configuration commands are necessary in order to"
    echo "         configure ROSE for building.  The commands are always run in the"
    echo "         appropriate directory regardless of your current working directory."
    echo
    echo "Switches:"
    echo "         --dry-run | -n"
    echo "                 Show what commands would be run without running them."
    echo
    echo "         --verbose | -v"
    echo "                 Cause the configuration command to output debugging info."
    echo
    echo "         --build | -b"
    echo "                 Run the 'build' script in the source tree. This is a"
    echo "                 shell script that runs tools such as automake if you"
    echo "                 need to regenerate the Makefile.in files (and some"
    echo "                 others) in the source tree."
    echo
    echo "         All other configuration comes from the .rmc-main.cfg file"
    echo "         located at the top of the build tree."
    echo
    exit 0
}

# General compiler flags
cc_flags() {
    echo "-fPIC"
}

cxx_flags() {
    echo -n "-fPIC"

    local cxx_major=$(echo "$CXX_VERSION" |cut -d. -f1)
    local cxx_minor=$(echo "$CXX_VERSION" |cut -d. -f2)

    case "$CXX_VENDOR" in
        gnu|llvm)
            if [ "$cxx_major" -eq 4 -a "$cxx_minor" -ge 8 ] || [ "$cxx_major" -ge 5 ]; then
                echo -n " -ftemplate-backtrace-limit=0"
            fi

	    # See [https://access.redhat.com/blogs/766093/posts/3606481].
	    echo -n " -D_FORTIFY_SOURCE=2"
	    echo -n " -Wp,-D_GLIBCXX_ASSERTIONS"

	    if [ "$cxx_major" -eq 4 -a "$cxx_minor" -ge 9 ] || [ "$cxx_major" -ge 5 ]; then
		# See [https://lwn.net/Articles/584225/]. Somewhat expensive, so commented out
		: echo -n " -fstack-protector-strong"
	    fi

	    # See [https://securingsoftware.blogspot.com/2017/12/stack-clash-protection-in-gcc.html].
	    # Commented out because it uses substantial memory.
	    #echo -n " -fstack-clash-protection"

	    # Position independendent executable. See [https://access.redhat.com/blogs/766093/posts/1975803].
	    # Commented out because it makes debugging more difficult.
	    #echo -n " -fPIE -fpie"

	    # Disable execution on the stack
	    echo -n " -Wl,-z,noexecstack"

	    # Force linker to resolve all function references at startup, also making the GOT read-only.
	    # See [https://blog.osiris.cyber.nyu.edu/exploitation%20mitigation%20techniques/exploitation%20techniques/2011/06/02/relro-relocation-read-only/]
	    echo -n " -Wl,-z,relro -Wl,-z,now"

            ;;
    esac
}

# Flags to control C and C++ warning messages as a space-separated list w/out quoting.
cc_warning_flags() {
    local c_major=$(echo "$C_VERSION" |cut -d. -f1)
    local c_minor=$(echo "$C_VERSION" |cut -d. -f2)
    case "$RMC_WARNINGS" in
        yes)
            case "$C_VENDOR" in
                gnu|llvm)
                    echo -n "-Wall"
                    echo -n " -Wno-attributes"

                    if [ "$c_major" -eq 4 -a "$c_minor" -ge 5 ] || [ "$c_major" -gt 4 ]; then
                        echo -n " -Wno-unused-local-typedefs" # common warning from boost
                    fi

                    if [ "$c_major" -ge 5 ]; then
                        echo -n " -fdiagnostics-color=always" # colorized within tools like emacs
                    fi

                    if [ "$c_major" -ge 6 ]; then
                        echo -n " -Wno-misleading-indentation" # common warning from ROSE generated header files
                        echo -n " -Wno-nonnull-compare" # because ROSE has lots of "assert(this)"
                    fi
                    ;;
            esac
            ;;
        no|ambivalent)
            : nothing
            ;;
    esac
}

cxx_warning_flags() {
    local cxx_major=$(echo "$CXX_VERSION" |cut -d. -f1)
    local cxx_minor=$(echo "$CXX_VERSION" |cut -d. -f2)
    case "$RMC_WARNINGS" in
        yes)
            case "$CXX_VENDOR" in
                gnu|llvm)
                    echo -n "-Wall"
                    echo -n " -Wno-attributes"
                    echo -n " -Wno-deprecated-declarations" # common warning from dlib using std::auto_ptr

                    if [ "$cxx_major" -eq 4 -a "$cxx_minor" -ge 5 ] || [ "$cxx_major" -gt 4 ]; then
                        echo -n " -Wno-unused-local-typedefs" # common warning from boost
                    fi

                    if [ "$cxx_major" -ge 5 ]; then
                        echo -n " -fdiagnostics-color=always" # colorized within tools like emacs
                    fi

                    if [ "$cxx_major" -ge 6 ]; then
                        echo -n " -Wno-terminate" # common warning from dlib throwing an exception in destructors
                        echo -n " -Wno-misleading-indentation" # common warning from ROSE generated header files
                        echo -n " -Wno-nonnull-compare" # because ROSE has lots of "assert(this)"
                    fi
                    ;;
            esac
            ;;
        no|ambivalent)
            : nothing
            ;;
    esac
}

# Flags for code coverage
code_coverage_flags() {
    case "$RMC_LCOV" in
        ""|no|none|ambivalent)
            : nothing to do
            ;;
        *)
            case "$CXX_VENDOR" in
                gnu|llvm)
                    # Pei-Hung reports that we should be using "--coverage" instead of "-fprofile-arcs -ftest-coverage"
                    # echo "-fprofile-arcs -ftest-coverage"
                    echo "--coverage"
                    ;;
                *)
                    die "cannot generate code coverage results for $CXX_VENDOR compilers"
                    ;;
            esac
            ;;
    esac
}

# Flags for compiler optimization
autoconf_optimize_flags() {
    local switch="$1"
    case "$RMC_OPTIMIZE" in
        yes) echo -n " $switch='-O3 -DNDEBUG'" ;;
        no)  echo -n " $switch='-O0'" ;;
        ambivalent) : nothing ;;
    esac
}

cmake_optimize_flags() {
    case "$RMC_OPTIMIZE" in
        yes) echo -n "-O3 -DNDEBUG" ;;
        no)  echo -n "-O0" ;;
        ambivalent) : nothing ;;
    esac
}

# Flags for controlling warnings
autoconf_cc_warning_flags() {
    local switch="$1"
    local flags="$(cc_warning_flags)"
    [ -n "$flags" ] && echo -n " $switch='$flags'"
}

autoconf_cxx_warning_flags() {
    local switch="$1"
    local flags="$(cxx_warning_flags)"
    [ -n "$flags" ] && echo -n " $switch='$flags'"
}

cmake_cc_warning_flags() {
    cc_warning_flags
}

cmake_cxx_warning_flags() {
    cxx_warning_flags
}

# Flags for controlling debugability
#   Pei-Hung reports that code coverage flags need to go into --with-C_DEBUG and --with-CXX_DEBUG switches in order
#   to avoid linking problems, and should not be in CFLAGS and CXXFLAGS.
autoconf_debug_flags() {
    local switch="$1"
    case "$RMC_DEBUG" in
        yes) echo -n " $switch='-g $(code_coverage_flags)'" ;;
        no)  echo -n " $switch='-fomit-frame-pointer $(code_coverage_flags)'" ;;
    esac
}

cmake_debug_flags() {
    case "$RMC_DEBUG" in
        yes) echo -n "-g" ;;
        no)  echo -n "-fomit-frame-pointer" ;;
    esac
}

# Get the list of what ROSE uses for --enable-languages=all. The list is returned as space-separated list of words.
all_languages() {
    local configfile="$RG_SRC/config/support-languages.m4"
    sed -n '/^[ \t]*ALL_SUPPORTED_LANGUAGES/ { s/.*"\(.*\)"/\1/; s/[, \t]\+/ /g; p; q}' <"$configfile"
}

# Normalize the list of languages by removing "none", replacing "all" with the list from ROSE, and sorting them,
# removing duplicates, and returning one per line. Also, the language 'c' is converted to 'c++' since ROSE requires
# them to be either both enabled or both disabled.
normalize_languages() {
    local languages="$(echo "$*" | sed 's/[, \t]\+/ /g')"
    local result=() lang=
    for lang in $languages; do
        case "$lang" in
            none)
                : ignored
                ;;
            all)
                result=("${result[@]}" $(all_languages))
                ;;
            c)
                result=("${result[@]}" "c++")
                ;;
            *)
                result=("${result[@]}" "$lang")
                ;;
        esac
    done
    echo "${result[@]}" |tr ' ' '\n' |sort -u |tr '\n' ' ' |sed 's/ *$//'
}

# Generates "--with-XXX=VALUE", "--without-XXX", or nothing.
# If if_true is non-empty, then use it as the value in the "--with-XXX=VALUE" form.
autoconf_optional_with() {
    local name="$1" value="$2" if_true="$3"
    case "$value" in
        no|none)
            echo -n " --without-$name"
            ;;
        ""|ambivalent)
            : nothing
            ;;
        *)
            [ -n "$if_true" ] && value="$if_true"
            echo -n " --with-$name='$value'"
            ;;
    esac
}

# Generates "--enable-XXX=VALUE", "--disable-XXX", or nothing
# If if_true is non-empty, then use it as the value in the "--enable-XXX=VALUE" form.
# If if_false is non-empty, emit "--enable-XXX=$if_false" instead of "--disable-XXX".
autoconf_optional_enable() {
    local name="$1" value="$2" if_true="$3" if_false="$4"
    case "$value" in
        no|none)
            if [ -n "$if_false" ]; then
                echo -n " --enable-${name}='$if_false'"
            else
                echo -n " --disable-$name"
            fi
            ;;
        ""|ambivalent)
            : nothing
            ;;
        *)
            [ -n "$if_true" ] && value="$if_true"
            echo -n " --enable-$name='$value'"
            ;;
    esac
}

cmake_optional() {
    local name="$1" value="$2" if_true="$3"
    case "$value" in
        no|none)
            echo -n " -D$name=no"
            ;;
        ""|ambivalent)
            : nothing
            ;;
        *)
            [ -n "$if_true" ] && value="$if_true"
            echo -n " -D$name='$value'"
            ;;
    esac
}

cmake_error_if_specified() {
    local name="$1" value="$2" if_true="$3"
    case "$value" in
        ""|ambivalent)
            : good
            ;;
        *)
            [ -n "$if_true" ] && value="$if_true"
            die "cmake does not support $name '$value'; try setting it to 'ambivalent'"
            ;;
    esac
}

# Cmake switch for specified language
cmake_language_name() {
    local lang="$1"

    case "$lang" in
        binaries) echo "enable-binary-analysis" ;;
        c++)      echo "enable-c" ;;
        *)        echo "enable-$lang" ;;
    esac
}

# Decide which frontend languages to enable
cmake_frontend_languages() {
    declare -A languages
    for lang in $(normalize_languages "$RMC_LANGUAGES"); do
        languages["$lang"]=yes
    done

    for lang in $(normalize_languages all); do
        if [ -n "${languages[$lang]}" ]; then
            echo -n " -D$(cmake_language_name $lang)=ON"
        else
            echo -n " -D$(cmake_language_name $lang)=OFF"
        fi
    done
}

# Echo the autoconf "configure" command-line to standard output
autoconf_command() {
    echo -n "env CC='$C_COMPILER' CXX='$CXX_COMPILER' FC='$FORTRAN_COMPILER'"
    echo -n " CFLAGS='$(cc_flags)' CXXFLAGS='$(cxx_flags)'"
    echo -n " LDFLAGS='-Wall $(code_coverage_flags)'"
    echo -n " $ROSE_SOURCE/configure"
    autoconf_optimize_flags --with-C_OPTIMIZE
    autoconf_optimize_flags --with-CXX_OPTIMIZE
    autoconf_cc_warning_flags --with-C_WARNINGS
    autoconf_cxx_warning_flags --with-CXX_WARNINGS
    autoconf_debug_flags --with-C_DEBUG
    autoconf_debug_flags --with-CXX_DEBUG
    echo -n " --disable-boost-version-check"
    echo -n " --disable-gcc-version-check"
    autoconf_optional_enable assertion-behavior "$RMC_ASSERTIONS"
    autoconf_optional_enable edg_version "$RMC_EDG"
    local languages=$(normalize_languages $RMC_LANGUAGES |tr ' ' ',')
    autoconf_optional_enable languages "$languages" "$languages" "none"
    echo -n " --prefix='$ROSE_INSTALLED'"
    echo -n " --with-ROSE_LONG_MAKE_CHECK_RULE=yes"
    echo -n " --with-boost='$BOOST_ROOT'"
    autoconf_optional_with dlib "$RMC_DLIB" "$DLIB_INCDIRS"
    autoconf_optional_with doxygen "$RMC_DOXYGEN" "$DOXYGEN"
    autoconf_optional_with dwarf "$RMC_DWARF" "$LIBDWARF_ROOT"
    autoconf_optional_with cuda "$RMC_CUDA" "$CUDA_ROOT/bin"
    autoconf_optional_with elf "$RMC_ELF" "$LIBELF_ROOT"
    autoconf_optional_with gcrypt "$RMC_GCRYPT" "$LIBGCRYPT_ROOT"
    autoconf_optional_with gfortran "$FORTRAN_COMPILER"
    autoconf_optional_with java "$RMC_JAVA" "$JAVA_COMPILER"
    autoconf_optional_with libreadline "$RMC_READLINE" "$LIBREADLINE_ROOT"
    autoconf_optional_with magic "$RMC_MAGIC" "$LIBMAGIC_ROOT"
    echo -n " --with-pch=no"
    autoconf_optional_with pqxx "$RMC_PQXX" "$LIBPQXX_ROOT"
    autoconf_optional_with python "$RMC_PYTHON" "$(which python)"
    autoconf_optional_with qt "$RMC_QT" "$QT_ROOT"
    autoconf_optional_with sqlite3 "$RMC_SQLITE" "$SQLITE_ROOT"
    autoconf_optional_with wt "$RMC_WT" "$WT_ROOT"
    autoconf_optional_with yaml "$RMC_YAML" "$YAMLCPP_ROOT"
    autoconf_optional_with yices "$RMC_YICES" "$YICES_ROOT"
    autoconf_optional_with z3 "$RMC_Z3" "$Z3_ROOT"
    echo -n " $RMC_OTHER"
    [ -n "$VERBOSE" ] && echo -n " --verbose"
    echo
}

# Echo the cmake command-line to standard output
cmake_command() {
    # These don't seem to be supported by cmake yet
    cmake_error_if_specified doxygen  "$RMC_DOXYGEN"  "$DOXYGEN"
    cmake_error_if_specified dwarf    "$RMC_DWARF"    "$LIBDWARF_ROOT"
    cmake_error_if_specified elf      "$RMC_ELF"      "$LIBELF_ROOT"
    cmake_error_if_specified java     "$RMC_JAVA"     "$JAVA_COMPILER"
    cmake_error_if_specified magic    "$RMC_MAGIC"    "$LIBMAGIC_ROOT"
    cmake_error_if_specified pqxx     "$RMC_PQXX"     "$LIBPQXX_ROOT"
    cmake_error_if_specified qt       "$RMC_QT"       "$QT_ROOT"
    cmake_error_if_specified raja     "$RMC_RAJA"
    cmake_error_if_specified readline "$RMC_READLINE" "$LIBREADLINE_ROOT"
    cmake_error_if_specified spot     "$RMC_SPOT"
    cmake_error_if_specified wt       "$RMC_WT"       "$WT_ROOT"

    local cc_flags="$(cc_flags) $(cmake_optimize_flags) $(cmake_cc_warning_flags) $(cmake_debug_flags) $(code_coverage_flags)"
    local cxx_flags="$(cxx_flags) $(cmake_optimize_flags) $(cmake_cxx_warning_flags) $(cmake_debug_flags) $(code_coverage_flags)"

    echo -n "cmake"
    echo -n " -DCMAKE_C_COMPILER='$C_COMPILER'"
    echo -n " -DCMAKE_C_FLAGS='$cc_flags'"
    echo -n " -DCMAKE_CXX_COMPILER='$CXX_COMPILER'"
    echo -n " -DCMAKE_CXX_FLAGS='$cxx_flags'"
    echo -n " -DCMAKE_INSTALL_PREFIX='$ROSE_INSTALLED'"
    echo -n " -DBOOST_ROOT='$BOOST_ROOT'"

    cmake_frontend_languages

    cmake_optional ASSERTION_BEHAVIOR "$RMC_ASSERTIONS"
    cmake_optional EDG_VERSION "$RMC_EDG"
    cmake_optional enable-yices "$RMC_YICES" "$YICES_ROOT"

    [ -n "$PYTHON_INCDIRS" ] && echo -n " -DPYTHON_INCLUDE_DIRS='$PYTHON_INCDIRS'"
    [ -n "$PYTHON_LIBDIRS" ] && echo -n " -DPYTHON_LIBRARIES='$PYTHON_LIBDIRS'"

    case "$RMC_BISON" in
	ambivalent)
	    : nothing
	    ;;
	no|none)
	    echo -n " -DBISON_ROOT=no"
	    ;;
	*)
	    echo -n " -DBISON_ROOT='$BISON_ROOT'"
	    ;;
    esac

    case "$RMC_DLIB" in
	ambivalent)
	    : nothing
	    ;;
	no|none)
	    echo -n " -DDLIB_ROOT=no"
	    ;;
	*)
	    echo -n " -DDLIB_ROOT='$DLIB_ROOT'"
	    ;;
    esac

    case "$RMC_GCRYPT" in
	ambivalent)
	    : nothing
	    ;;
	no|none)
	    echo -n " -DGCRYPT_ROOT=no"
	    ;;
	*)
	    echo -n " -DGCRYPT_ROOT='$LIBGCRYPT_ROOT'"
	    ;;
    esac
    [ -n "$LIBGPG_ERROR_ROOT" ] && echo -n " -DGPGERROR_ROOT='$LIBGPG_ERROR_ROOT'"

    case "$RMC_SQLITE" in
	ambivalent)
	    : nothing
	    ;;
	no|none)
	    echo -n " -DSQLITE3_ROOT=no"
	    ;;
	*)
	    echo -n " -DSQLITE3_ROOT='$SQLITE_ROOT'"
	    ;;
    esac

    case "$RMC_YAML" in
	ambivalent)
	    : nothing
	    ;;
	no|none)
	    echo -n " -DYAMLCPP_ROOT=no"
	    ;;
	*)
	    echo -n " -DYAMLCPP_ROOT='$YAMLCPP_ROOT'"
	    ;;
    esac

    case "$RMC_Z3" in
	ambivalent)
	    : nothing
	    ;;
	no|none)
	    echo -n " -DZ3_ROOT=no"
	    ;;
	*)
	    echo -n " -DZ3_ROOT='$Z3_ROOT'"
	    ;;
    esac

    [ -n "$ZLIB_ROOT" ] && echo -n " -DZLIB_ROOT='$ZLIB_ROOT'";

    [ -n "$VERBOSE" ] && echo -n " -DVERBOSE=TRUE"
    echo " $ROSE_SOURCE"
}

# Echo the tup commands to standard output
tup_command() {
    autoconf_command |sed "s%$ROSE_SOURCE/configure%$ROSE_SOURCE/scripts/tup/rose-configure-tup%"
}

########################################################################################################################

# Check a few things that should have been configured by RMC-2. Some of these are invariants in the RMC environment
# setup, so we're mainly checking things that a misunderstanding user might get the hankering to change by hand.
[ "$RMC_HASH" = "" ] && die "this command needs to run in an RMC build environment"
[ "$RG_SRC" = "" -o "$RG_BLD" = "" ] && die "RMC environment problem (RG_SRC, RG_BLD)"
[ "$C_COMPILER" = "" ] && die "no C compiler selected";
[ "$CXX_COMPILER" = "" ] && die "no C++ compiler selected";
[ "$C_VENDOR" != "$CXX_VENDOR" ] && die "mismatched C and C++ compiler vendors";
[ "$C_VERSION" != "$CXX_VERSION" ] && die "mismatched C and C++ compiler versions";
[ "$BOOST_ROOT" = "" ] && die "no boost library selected";

# Command-line args
dry_run=
run_build_script=
: VERBOSE # (often an environment variable)
while [ "$#" -gt 0 ]; do
    case "$1" in
        --) shift; break ;;
        -h|--help) show_help_and_exit; shift ;;
	-v|--verbose) VERBOSE=yes; shift ;;
        -n|--dry-run) dry_run=yes; shift ;;
        -b|--build) run_build_script=yes; shift ;;
        *) echo "$0: unknown switch: $1" >&2; exit 1 ;;
    esac
done

# Sanity checks. Give some functions an opportunity to exit since they're normally invoked as $(...)
code_coverage_flags >/dev/null

# Write the configure command to a temporary file before running it. This seems to be the best way to get the quoting
# correct at the same time as providing a way to handle the --dry-run switch.
script=$(tempfile)
echo "# configuration commands" >"$script"
echo "set -e" >>"$script"
trap "rm -f '$script'" EXIT

if [ -n "$run_build_script" ]; then
    echo "(cd $RG_BLD && ./build) || exit 1" >>"$script"
fi

case "$RMC_BUILD" in
    autoconf)
        autoconf_command >>"$script"
        ;;
    cmake)
        cmake_command >>"$script"
        ;;
    tup)
        tup_command >>"$script"
        ;;
    *)
        die "unknown build system: $RMC_BUILD"
        ;;
esac

if [ -n "$dry_run" ]; then
    cat "$script"
else
    (cd "$RG_BLD" && source "$script")
fi
