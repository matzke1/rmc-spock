#!/bin/bash
# This runs make in a slightly more friendly way for ROSE developers.
# It must be invoked inside an RMC environment (it checks for that)
arg0="rmc ${0##*/}"
dir0="${0%/*}"

source "$SPOCK_SCRIPTS/impl/basic-support.sh" || exit 1

########################################################################################################################

# Check a few things that should have been configured via Spock's version of RMC. Some of these are invariants in the
# RMC environment setup, so we're mainly checking things that a misunderstanding user might get the hankering to
# change by hand.
[ "$RMC_HASH" = "" ] && die "this command needs to run in an RMC build environment"
[ "$RG_SRC" = "" -o "$RG_BLD" = "" ] && die "RMC environment problem (RG_SRC, RG_BLD)"
[ "$C_COMPILER" = "" ] && die "no C compiler selected";
[ "$CXX_COMPILER" = "" ] && die "no C++ compiler selected";
[ "$C_VENDOR" != "$CXX_VENDOR" ] && die "mismatched C and C++ compiler vendors";
[ "$C_VERSION" != "$CXX_VERSION" ] && die "mismatched C and C++ compiler versions";
[ "$BOOST_ROOT" = "" ] && die "no boost library selected";
[ "$RMC_PARALLELISM" = "" ] && die "no build paralellism specified";
[ "$RMC_MAKE" = "running" ] && die "$dir0 should not be in your PATH";

# Command-line switches. Parse "make" switches, keeping track of a couple special ones.
make_switches=()
have_C= have_j= have_silent=--silent do_make_help= dry_run=
while [ "$#" -gt 0 ]; do
    case "$1" in
	-n|--dry-run)
	    dry_run=yes
	    shift
	    ;;
	-C|--directory)
	    make_switches=("${make_swithces[@]}" "$1" "$2")
	    have_C="$1 $2"
	    shift 2
	    ;;
	--directory=*)
	    make_switches=("${make_switches[@]}" "$1")
	    have_C="$1"
	    shift
	    ;;
	-j|--jobs)
	    case "$2" in
		[0-9]*[0-9])
		    have_j="$1 $2"
		    shift 2
		    ;;
		*)
		    have_j="$1"
		    shift
		    ;;
	    esac
	    ;;
	-j*)
	    have_j="$1"
	    shift
	    ;;
	--jobs=*)
	    have_j="$1"
	    shift
	    ;;
	--silent)
	    have_silent=--silent
	    shift
	    ;;
	--no-silent|--verbose|-v)
	    have_silent=
	    shift
	    ;;
	--debug|-f|--file|--makefile|-I|--include-dir|-l|--load-average|-o|--old-file|--assume-old|-O|--output-sync|-W|--what-if|--new-file|--assume-new)
	    # These all take an argument
	    make_switches=("${make_swithces[@]}" "$1" "$2")
	    shift 2
	    ;;
	-*)
	    # These take no arguments
	    make_switches=("${make_switches[@]}" "$1")
	    shift
	    ;;
	*=*)
	    # These are make variables, not targets
	    make_switches=("${make_switches[@]}" "$1")
	    shift
	    ;;
	*)
	    break
	    ;;
    esac
done
targets=("$@")
if [ "${#targets[*]}" -eq 0 ]; then
    targets=(all)
fi

# Figure out the parallelism.  The "-j" etc. switches will override the values from our own configuration files.
parallelism=
if [ "$have_j" != "" ]; then
    parallelism="$have_j"
elif [ "$RMC_PARALLELISM" = "unlimited" ]; then
    parallelism="-j"
else
    parallelism="-j$RMC_PARALLELISM"
fi

# Run "make" for each target.
for target in "${targets[@]}"; do
    # Use --silent because ROSE's autoconf- and cmake-generated maekfiles generally print their own output
    # anyway. Otherwise "make" is so noisy that warning messages tend to get overlooked
    export RMC_MAKE=running
    echo "+" make $parallelism $have_silent "${make_switches[@]}" "$target" >&2
    if [ "$dry_run" != "yes" ]; then
	make $parallelism $have_silent "${make_switches[@]}" "$target" \
            || exit 1
    fi
done
exit 0
