#!/bin/bash
set -e
set -o pipefail
#
# This runs make or tup in a slightly more friendly way for ROSE developers.  It must be invoked inside an RMC
# environment (it checks for that). Most users will just run these commands directly instead (especially in the case of
# tup, which is easier to run than make).
#
arg0="rmc ${0##*/}"
dir0="${0%/*}"

source "$SPOCK_SCRIPTS/impl/basic-support.sh" || exit 1

########################################################################################################################

# Check a few things that should have been configured via Spock's version of RMC. Some of these are invariants in the
# RMC environment setup, so we're mainly checking things that a misunderstanding user might get the hankering to
# change by hand.
[ "$RMC_HASH" = "" ] && die "this command needs to run in an RMC build environment"
[ "$RG_SRC" = "" -o "$RG_BLD" = "" ] && die "RMC environment problem (RG_SRC, RG_BLD)"
[ "$C_COMPILER" = "" ] && die "no C compiler selected";
[ "$CXX_COMPILER" = "" ] && die "no C++ compiler selected";
[ "$C_VENDOR" != "$CXX_VENDOR" ] && die "mismatched C and C++ compiler vendors";
[ "$C_VERSION" != "$CXX_VERSION" ] && die "mismatched C and C++ compiler versions";
[ "$BOOST_ROOT" = "" ] && die "no boost library selected";
[ "$RMC_PARALLELISM" = "" ] && die "no build paralellism specified";
[ "$RMC_MAKE" = "running" ] && die "$dir0 should not be in your PATH";

# Command-line switches. Parse "make" switches, keeping track of a couple special ones.
make_switches=()
directory= have_j= have_silent=--silent do_make_help= dry_run= do_environ=
while [ "$#" -gt 0 ]; do
    case "$1" in
        -n|--dry-run)
            dry_run=yes
            shift
            ;;
        -C|--directory)
            directory="$2"
            shift 2
            ;;
        -C*)
            directory="${1#-C}"
            shift
            ;;
        --directory=*)
            directory="${1#--directory=}"
            shift
            ;;
        --environ)
            # Perform tup environment check (i.e., no --no-environ-check)
            do_environ=yes
            shift
            ;;
        -j|--jobs)
            case "$2" in
                [0-9]*[0-9])
                    have_j="$1 $2"
                    shift 2
                    ;;
                *)
                    have_j="$1"
                    shift
                    ;;
            esac
            ;;
        -j*)
            have_j="$1"
            shift
            ;;
        --jobs=*)
            have_j="$1"
            shift
            ;;
        --silent)
            have_silent=--silent
            shift
            ;;
        --no-silent|--verbose|-v)
            have_silent=
            shift
            ;;
        --debug|-f|--file|--makefile|-I|--include-dir|-l|--load-average|-o|--old-file|--assume-old|-O|--output-sync|-W|--what-if|--new-file|--assume-new)
            # These all take an argument
            make_switches=("${make_swithces[@]}" "$1" "$2")
            shift 2
            ;;
        -*)
            # These take no arguments
            make_switches=("${make_switches[@]}" "$1")
            shift
            ;;
        *=*)
            # These are make variables, not targets
            make_switches=("${make_switches[@]}" "$1")
            shift
            ;;
        *)
            break
            ;;
    esac
done
targets=("$@")

# Figure out the parallelism.  The "-j" etc. switches will override the values from our own configuration files.
parallelism=
if [ "$have_j" != "" ]; then
    parallelism="$have_j"
elif [ "$RMC_PARALLELISM" = "unlimited" ]; then
    parallelism="-j"
else
    parallelism="-j$RMC_PARALLELISM"
fi

run_make_command() {
    # Detect make features
    local make_flags=
    if make --version |grep 'GNU Make [4-9]\.' >/dev/null 2>&1; then
        make_flags=--output-sync
    fi

    # Build a shell script that runs "make" for each target.
    local script=$(tempfile)
    trap "rm -f '$script'" EXIT
    (
	echo "set -e"
	[ "${#targets[*]}" -eq 0 ] && targets=(all)
	for target in "${targets[@]}"; do
            # Use --silent because ROSE's autoconf- and cmake-generated makefiles generally print their own output
            # anyway. Otherwise "make" is so noisy that warning messages tend to get overlooked
            export RMC_MAKE=running
            export make_directory=()
            [ -n "$directory" ] && make_directory=("-C" "$directory")
            echo "+" make $parallelism $have_silent $make_flags "${make_directory[@]}" "${make_switches[@]}" "$target" >&2
	    echo make $parallelism $have_silent $make_flags "${make_directory[@]}" "${make_switches[@]}" "$target"
	done
    ) >"$script"

    # Run the script, sending the output through a filter that highlights warnings
    if [ "$dry_run" != "yes" ]; then
	local filter_args=
	if blame-warnings </dev/null >/dev/null 2>&1; then
	    filter_args="--filter=blame-warnings -F--repo=$RG_SRC"
	fi
	echo "+ spock-filter $filter_args bash '$script'" >&2
	spock-filter $filter_args bash "$script" || exit 1
    fi
}

run_tup_command() {
    local cmd="tup"

    # If the target is "install" then we do something special
    local doing_install=
    if [ "${#targets[*]}" -eq 1 -a "${targets[0]}" = "install" ]; then
        doing_install=yes
        targets=("$RG_BLD")
    fi

    # If the target is "check" then remove it; tup automatically runs tests
    if [ "${#targets[*]}" -eq 1 -a "${targets[0]}" = "check" ]; then
        targets=()
    fi

    # If no target specified, use "." as the target in order to restrict the build to one directory.
    # BTW, the targets must come before other command-line switches.
    cmd="${cmd} ${targets[*]}"
    [ "${#targets[*]}" -eq 0 ] && cmd="${cmd} ."

    # By default, suppress tup's environment check (e.g., $PATH) and use the values already stored
    # in the database. This is necessary because we often invoke tup from multiple places, e.g.,
    # terminal windows and emacs, and they may have slight variations in PATH which don't make a bit
    # of difference to the build.
    [ -n "$do_environ" ] || cmd="${cmd} --no-environ-check"

    # Tup is parallel by default, so there is no plain "-j" (but -jN is allowed)
    [ "$parallelism" != "-j" ] && cmd="$cmd $parallelism"

    # Tup is rather quiet by default, so --no-silent should make tup more verbose than usual.
    [ -n "$have_silent" ] || cmd="$cmd --verbose"

    [ "${#make_switches[*]}" -gt 0 ] && cmd="$cmd ${make_switches[*]}"

    [ -n "$directory" ] || directory="."

    # What filter should we use?
    local filter_args=
    if blame-warnings </dev/null >/dev/null 2>&1; then
	filter_args="--filter=blame-warnings -F--repo=$RG_SRC"
    fi

    # Run the command
    echo "+ spock-filter -C $directory $filter_args $cmd" >&2
    if [ "$dry_run" != "yes" ]; then
	spock-filter -C "$directory" $filter_args $cmd || exit 1
    fi

    # Copy files to final locations?  The only ELF files in the MatrixTestingProject are sample inputs and therefore we
    # should not monkey with their rpaths, but rather install them as-is.
    if [ -n "$doing_install" ]; then
        prefix=
        case "$RMC_INSTALLED" in
            yes|no|ambivalent)
                prefix=
                ;;
            *)
                prefix="$RMC_INSTALLED"
                ;;
        esac

        (
            set -x
            cd "$RG_BLD" && \
                $RG_SRC/scripts/tup/install-staged --next --exclude='projects/MatrixTestingProject/*' $prefix
        ) || exit 1
    fi
}

case "$RMC_BUILD" in
    cmake|autoconf)
        run_make_command
        ;;
    tup)
        run_tup_command
        ;;
    *)
        die "\"$RMC_BUILD\" build system not supported"
        ;;
esac
exit 0
