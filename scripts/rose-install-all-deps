#!/bin/bash

# Pre-install all ROSE software dependencies using Spock.  By default, this script installs lots of stuff, but only
# those things that aren't installed yet. If you don't want to install all this, override the variables defined below,
# such as COMPILER_COLLECTIONS, CXX_LANGUAGES, BOOST_VERSIONS, etc.
#
# Eventually this script could be simplified somewhat when Spock has better support for build vs. install dependencies.
# But for now, there are a few places where we have to specify build dependencies explicitly by lumping them in with
# the install dependencies.


arg0="${0##*/}"
dir0="${0%/*}"

umask 022

eval "$(spock-ls --shellvars)" || exit 1
source "$SPOCK_SCRIPTS/impl/basic-support.sh" || exit 1

########################################################################################################################
# These variables are defaults that the user can override on the command-line
########################################################################################################################

# These variables define what the user wants to install. They're normally overridden by the user when he invokes this
# script, but we provide defaults here for convenience.  The values of these variables are space-separated Spock version
# numbers with and implied prefix matching operator ("-", as in "foo-1.2" which matches "foo=1.2.0", "foo=1.2.1", ...),
# but some special values are accepted:
#    Empty or unset
#        Use the default list of versions, which tends to install lots of stuff and might take days to run. Make sure
#        you have enough disk space!
#    "none"
#        Do not install any versions, and do not use any existing versions when installing software that depends on this
#        package.
#    "installed"
#        Do not install any versions, but when installing software that depends on this package, use all previously
#        installed versions of this software.

# Compiler collections. Give only the vendor and version as in "gnu-4.8" rather than "gnu-compilers-4.8". However,
# if COMPILER_SPECS is set then ignore COMPILER_COLLECTIONS and CXX_LANGUAGES.
: ${COMPILER_COLLECTIONS:="gnu-4.8 gnu-4.9 gnu-5 gnu-6 llvm-3.5 llvm-3.6 llvm-3.7 llvm-3.8 llvm-3.9"}

# C++ languages. These are languages accepted by Spock, but see COMPILER_COLLECTIONS
: ${CXX_LANGUAGES:="gnu++03 c++11"}

# CMake versions
: ${CMAKE_VERSIONS:=3}

# List of boost versions to install. (1.54 is intentionally omitted due to buggy thread implementation)
: ${BOOST_VERSIONS:="1.51 1.52 1.53 1.55 1.56 1.57 1.58 1.59 1.60 1.61 1.62 1.63"}

# List of dlib versions to install.
: ${DLIB_VERSIONS:="18.16 18.17 18.18"}

# List of java versions.
: ${JAVA_VERSIONS:="oracle-java-7 oracle-java-8"}

# List of python versions
: ${PYTHON_VERSIONS:="2 3"}

# Yices SMT solver versions
: ${YICES_VERSIONS:="1.0.28, 1.0.34, 1.0.40"}

# List of YAML-CPP versions
: ${YAMLCPP_VERSIONS:="0.5.1 0.5.2 0.5.3"}

# List of Spot library versions
: ${SPOT_VERSIONS:="1.2.6"}

# Ignore failures if "yes"
: ${IGNORE_FAILURES:=yes}


########################################################################################################################
# Support functions
########################################################################################################################

===() {
    if false; then
	echo
	echo
	echo
	echo "================================================================================"
	(figlet "$@" || banner "$@" || echo "===" "$@" "===") 2>/dev/null
	echo
	echo
    else
	# Less obtrusive version is better when we're installing only one config of each package
	echo
	echo
    fi
    return 0
}

nfailures=0
cannot_install() {
    if [ "$IGNORE_FAILURES" != "yes" ]; then
	echo "$arg0: installation failed" >&2
	exit 1
    fi
    nfailures=$[nfailures + 1]
    return 0
}

# Install $pkg_ghost with $dependencies if not installed already, and echo its spec regardless.  The $extra_deps are
# extra dependencies used during build that would conflict with using $pkg_ghost itself (e.g., llvm depends on a system
# compiler collection during the build, but cannot be used with that system compiler collection.
install-package() {
    local dependencies="$1" pkg_ghost="$2" extra_deps="$3"

    # First, see if this package exists (without depending on $extra_deps)
    local with="$pkg_ghost"
    [ "$dependencies" = "" ] || with="$dependencies,$with"
    local hash=$($SPOCK_BINDIR/spock-shell --with "$with" bash -c 'echo $SPOCK_EMPLOYED' 2>/dev/null |sed 's/.*://')
    if [ "$hash" != "" ]; then
	$SPOCK_BINDIR/spock-ls -1 "@$hash"
	return 0
    fi

    # Doesn't exist, so try to build it
    local with_extra="$with"
    [ "$extra_deps" = "" ] || with_extra="$extra_deps,$with_extra"
    echo >&2
    (
	set -ex
	$SPOCK_BINDIR/spock-shell --install=yes --with "$with_extra" --log '>=info' true
    )>&2 || return 1

    # Now we should be able to find it (without depending on $extra_deps)
    local hash=$($SPOCK_BINDIR/spock-shell --with "$with" bash -c 'echo $SPOCK_EMPLOYED' 2>/dev/null |sed 's/.*://')
    if [ "$hash" != "" ]; then
	$SPOCK_BINDIR/spock-ls -1 "@$hash"
	return 0
    fi

    return 1
}

using-these() {
    local title="$1"; shift
    echo
    echo "using these $title installations:"
    if [ "$#" -gt 0 ]; then
	for spec in "$@"; do
	    echo "    $spec"
	done
    else
	echo "    none"
    fi
}


########################################################################################################################
=== Sys compilers
########################################################################################################################

if ($SPOCK_BINDIR/spock-ls compiler-collection |grep system >/dev/null 2>&1); then
    echo "*** Installing system compilers"
    echo
    echo "system compilers are apparently installed already"
    echo "if you want to make sure, run $SPOCK_SCRIPTS/spock-install-system-compilers"
else
    (
	set -ex
	$SPOCK_SCRIPTS/spock-install-system-compilers
    ) || exit 1
fi


########################################################################################################################
=== Compilers
########################################################################################################################


# If the user already supplied a particular compiler specification, then try to install it directly. Otherwise assume
# its a list of one or more compiler collections and install the collections and use CXX_LANGUAGES to restrict the
# chosen compilers.
if [ "${#CXX_COMPILER_SPECS[*]}" -gt 0 ]; then
    specs=()
    for pattern in "${CXX_COMPILER_SPECS[@]}"; do
	specs=("${specs[@]}" $($SPOCK_BINDIR/spock-ls -1 "$pattern"))
    done
    CXX_COMPILER_SPECS=("${specs[@]}")
else
    # Install missing compiler collections and accumulate names of all in using_collections
    using_collections=()
    if [ "$COMPILER_COLLECTIONS" = "installed" ]; then
	using_collections=($($SPOCK_BINDIR/spock-ls -1 compiler-collection))
    elif [ "$COMPILER_COLLECTIONS" != "none" ]; then
	echo "*** Installing compiler collections: $COMPILER_COLLECTIONS"
	for vendor_version in $COMPILER_COLLECTIONS; do
	    [ "$vendor_version" = "none" ] && continue
	    vendor=$(echo "$vendor_version" |cut -d- -f1)
	    version=$(echo "$vendor_version" |cut -d- -f2)
	    collection_name="${vendor}-compilers"
	    collection_version=
	    [ "$version" != "" ] && collection_version="-$version"
	    collection_spec="${collection_name}${collection_version}"

	    build_deps=
	    case "$vendor" in
		llvm)
		    # LLVM's build depends on cmake, so we build one using the same compiler that we use to compile
		    # llvm. We'll install other user-requested versions of cmake later.
		    if (echo "COMPILER_COLLECTIONS" |grep llvm >/dev/null 2>&1); then
			install-package "gnu-default-c,gnu-default-c++" cmake-3
		    fi
		    build_deps="gnu-system-compilers"
		    ;;
		gnu)
		    ;;
	    esac

	    collection_spec=$(install-package "" $collection_spec "$build_deps")
	    [ "$collection_spec" != "" ] &&
		using_collections=("${use_collections[@]}" "$collection_spec")
	done
    fi

    # Figure out which actual C++ compilers we want to use based on the compiler collections installed (or found) above
    # and the languages requested by the user. Compilers don't always support all languages, so we must be careful.
    CXX_COMPILER_SPECS=()
    for collection in "${using_collections[@]}"; do
	for lang in $CXX_LANGUAGES; do
	    lang_spec=
	    case "$lang" in
		none) continue ;;
		default-*) lang_spec="$lang" ;;
		*) lang_spec="${lang}-compiler" ;;
	    esac
	    cxx_spec="$($SPOCK_BINDIR/spock-ls "$lang_spec" |grep "$collection" |cut -d' ' -f1)"
	    if [ "$cxx_spec" = "" ]; then
		echo "warning: $collection has no $lang compiler (skipping)" >&2
	    else
		CXX_COMPILER_SPECS=("${CXX_COMPILER_SPECS[@]}" $cxx_spec)
	    fi
	done
    done
fi

using-these C++ "${CXX_COMPILER_SPECS[@]}"

if [ "${#CXX_COMPILER_SPECS[*]}" -eq 0 ]; then
    echo >&2
    die "no point in continuing without a compiler"
fi


########################################################################################################################
=== CMake
########################################################################################################################

# CMake creates C++ shared libraries upon which it depends when installed, and thus must be compiled with each compiler.
echo "*** Installing CMake versions (per compiler): $CMAKE_VERSIONS"
CMAKE_SPECS=()
if [ "$CMAKE_VERSIONS" = "installed" ]; then
    CMAKE_SPECS=($($SPOCK_BINDIR/spock-ls -1 cmake))
else
    for cmake_version in $CMAKE_VERSIONS; do
	[ "$cmake_version" = "none" ] && continue
	for cxx_spec in "${CXX_COMPILER_SPECS[@]}"; do
	    spec=$(install-package "$cxx_spec,default-c" "cmake-$cmake_version")
	    if [ "$spec" = "" ]; then
		cannot_install
	    else
		CMAKE_SPECS=("${CMAKE_SPECS[@]}" "$spec")
	    fi
	done
    done
fi

using-these CMake "${CMAKE_SPECS[@]}"


########################################################################################################################
=== Boost
########################################################################################################################

# Boost has C++ libraries and thus must be compiled with each C++ compiler.
echo "*** Installing Boost versions (per compiler): $BOOST_VERSIONS"
BOOST_SPECS=()
if [ "$BOOST_VERSIONS" = "installed" ]; then
    die "boost \"installed\" setting is not implemented yet"
else
    for boost_version in $BOOST_VERSIONS; do
	[ "$boost_version" = "none" ] && continue
	for cxx_spec in "${CXX_COMPILER_SPECS[@]}"; do
	    spec=$(install-package "$cxx_spec,default-c" "boost-$boost_version")
	    if [ "$spec" = "" ]; then
		cannot_install
	    else
		BOOST_SPECS=("${BOOST_SPECS[@]}" "$spec")
	    fi
	done
    done
fi

using-these Boost "${BOOST_SPECS[@]}"


########################################################################################################################
=== DLib
########################################################################################################################

# Dlib is a header-only library, so there's no install dependency on the C++ compiler.
echo "*** Installing DLib versions: $DLIB_VERSIONS"
DLIB_SPECS=()
if [ "$DLIB_VERSIONS" = "installed" ]; then
    DLIB_SPECS=($($SPOCK_BINDIR/spock-ls -1 dlib))
else
    for dlib_version in $DLIB_VERSIONS; do
	[ "$dlib_version" = "none" ] && continue
	spec=$(install-package "" "dlib-$dlib_version")
	if [ "$spec" = "" ]; then
	    cannot_install
	else
	    DLIB_SPECS=("${DLIB_SPECS[@]}" "$spec")
	fi
    done
fi

using-these DLib "${DLIB_SPECS[@]}"


########################################################################################################################
=== Java
########################################################################################################################

# Java has no C++ compiler dependencies.
echo "*** Installing Java versions: $JAVA_VERSIONS"
JAVA_SPECS=()
if [ "$JAVA_VERSIONS" = "installed" ]; then
    JAVA_SPECS=($($SPOCK_BINDIR/spock-ls -1 oracle-java))
else
    for java_version in $JAVA_VERSIONS; do
	[ "$java_version" = "none" ] && continue

	case "$java_version" in
	    oracle-java-*)
		: good
		;;
	    *)
		java_version="oracle-java-$java_version"
		;;
	esac
	
	spec=$(install-package "" "$java_version")
	if [ "$spec" = "" ]; then
	    cannot_install
	else
	    JAVA_SPECS=("${JAVA_SPECS[@]}" "$spec")
	fi
    done
fi

using-these Java "${JAVA_SPECS[@]}"


########################################################################################################################
=== Python
########################################################################################################################

# Python creates C++ libraries and thus has a C++ compiler dependency
echo "*** Installing Python versions: $PYTHON_VERSIONS"
PYTHON_SPECS=()
if [ "$PYTHON_VERSIONS" = "installed" ]; then
    die "python \"installed\" setting is not implemented yet"
else
    for python_version in $PYTHON_VERSIONS; do
	[ "$python_version" = "none" ] && continue
	for cxx_spec in "${CXX_COMPILER_SPECS[@]}"; do
	    spec=$(install-package "$cxx_spec,default-c" "python-$python_version")
	    if [ "$spec" = "" ]; then
		cannot_install
	    else
		PYTHON_SPECS=("${PYTHON_SPECS[@]}" "$spec")
	    fi
	done
    done
fi

using-these Python "${PYTHON_SPECS[@]}"


########################################################################################################################
=== Yices
########################################################################################################################

# Yices version 1 is a closed-source library. It apparently doesn't depend on a compiler since the website has only
# one downloadable Linux configuration per version.
echo "*** Installing Yices versions: $YICES_VERSIONS"
YICES_SPECS=()
if [ "$YICES_VERSIONS" = "installed" ]; then
    YICES_SPECS=($($SPOCK_BINDIR/spock-ls -1 yices))
else
    for yices_version in $YICES_VERSIONS; do
	[ "$yices_version" = "none" ] && continue
	spec=$(install-package "" "yices-$yices_version")
	if [ "$spec" = "" ]; then
	    cannot_install
	else
	    YICES_SPECS=("${YICES_SPECS[@]}" "$spec")
	fi
    done
fi

using-these Yices "${YICES_SPECS[@]}"


########################################################################################################################
=== Yaml-cpp
########################################################################################################################

# YAML-cpp is a C++ library that depends on Boost C++ libraries. Therefore YAML-cpp has depends on the C++ compiler.
# However, we don't need to iterate over the compilers here because they're already implied by $BOOST_SPECS. YAML-cpp
# uses CMake during its build process, which we've installed above.
echo "*** Installing YAML-cpp versions (per boost): $YAMLCPP_VERSIONS"
YAMLCPP_SPECS=()
if [ "$YAMLCPP_VERSIONS" = "installed" ]; then
    die "yamlcpp \"installed\" setting is not implemented yet"
else
    for yamlcpp_version in $YAMLCPP_VERSIONS; do
	[ "$yamlcpp_version" = "none" ] && continue
	for boost_spec in "${BOOST_SPECS[@]}"; do
	    spec=$(install-package "$boost_spec" "yamlcpp-$yamlcpp_version")
	    if [ "$spec" = "" ]; then
		cannot_install
	    else
		YAMLCPP_SPECS=("${YAMLCPP_SPECS[@]}" "$spec")
	    fi
	done
    done
fi

using-these YAML-cpp "${YAMLCPP_SPECS[@]}"


########################################################################################################################
=== Spot
########################################################################################################################

# Spot (https://spot.lrde.epita.fr) is a C++ libtrary for LTL, \omega-automata manipulation, and model checking.
echo "*** Installing Spot versions: $SPOT_VERSIONS"
SPOT_SPECS=()
if [ "$SPOT_VERSIONS" = "installed" ]; then
    die "spot \"installed\" setting is not implemented yet"
else
    for spot_version in $SPOT_VERSIONS; do
	[ "$spot_version" = "none" ] && continue
	if [ "${spot_version#2}" != "$spot_version" ]; then
	    # Version >=2 no longer depends on boost.
	    spec=$(install-package "$boost_spec" "spot-$spot_version")
	    if [ "$spec" = "" ]; then
		cannot_install
	    else
		SPOT_SPECS=("${SPOT_SPECS[@]}" "$spec")
	    fi
	else
	    # Version 1 (or if we don't know the version) depends on boost
	    for boost_spec in "${BOOST_SPECS[@]}"; do
		spec=$(install-package "$boost_spec" "spot-$spot_version")
		if [ "$spec" = "" ]; then
		    cannot_install
		else
		    SPOT_SPECS=("${SPOT_SPECS[@]}" "$spec")
		fi
	    done
	fi
    done
fi

using-these Spot "${SPOT_SPECS[@]}"


########################################################################################################################

if [ "$nfailures" -gt 0 ]; then
    echo
    echo "$arg0: warning: number of installation failures: $nfailures" >&2
fi

echo
echo
exit 0
